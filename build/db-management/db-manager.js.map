{"version":3,"sources":["../../src/db-management/db-manager.js"],"names":["DB_CONFIG","configuration","getDbConfiguration","Sequelize","require","sequelize","database","user","password","host","server","dialect","dialectOptions","options","encrypt","pool","min","max","acquire","idle","idleTimeoutMillis","CustomerModel","Customers","getModel","DbManager","executeQuery","results","findAll"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,SAAS,GAAGC,sBAAcC,kBAAd,EAAlB;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,SAAS,GAAG,IAAIF,SAAJ,CAAcH,SAAS,CAACM,QAAxB,EAAkCN,SAAS,CAACO,IAA5C,EAAkDP,SAAS,CAACQ,QAA5D,EAAsE;AACpFC,EAAAA,IAAI,EAAET,SAAS,CAACU,MADoE;AAEpFC,EAAAA,OAAO,EAAE,OAF2E;AAGpFC,EAAAA,cAAc,EAAE;AACZC,IAAAA,OAAO,EAAE;AACLC,MAAAA,OAAO,EAAE;AADJ;AADG,GAHoE;AAQpFC,EAAAA,IAAI,EAAE;AACFC,IAAAA,GAAG,EAAEhB,SAAS,CAACe,IAAV,CAAeC,GADlB;AAEFC,IAAAA,GAAG,EAAEjB,SAAS,CAACe,IAAV,CAAeE,GAFlB;AAGFC,IAAAA,OAAO,EAAE,KAHP;AAIFC,IAAAA,IAAI,EAAEnB,SAAS,CAACe,IAAV,CAAeK;AAJnB;AAR8E,CAAtE,CAAlB;;AAiBA,MAAMC,aAAa,GAAGC,mBAAUC,QAAV,CAAmBlB,SAAnB,EAA8BF,SAA9B,CAAtB;;AAEA,MAAMqB,SAAN,CAAgB;AACZ;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA,eAAaC,YAAb,GAA4B;AACxB,QAAIC,OAAO,GAAG,MAAML,aAAa,CAACM,OAAd,EAApB,CADwB,CAGxB;;AAEA,WAAOD,OAAP;AACH,GAlBW,CAoBZ;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAjDY;;QAqDZF,S,GAAAA,S","sourcesContent":["import { configuration } from \"../config\";\r\nimport { Customers } from '../schemas';\r\n\r\nconst DB_CONFIG = configuration.getDbConfiguration();\r\nconst Sequelize = require('sequelize');\r\nconst sequelize = new Sequelize(DB_CONFIG.database, DB_CONFIG.user, DB_CONFIG.password, {\r\n    host: DB_CONFIG.server,\r\n    dialect: 'mssql',\r\n    dialectOptions: {\r\n        options: {\r\n            encrypt: true\r\n        }\r\n    },\r\n    pool: {\r\n        min: DB_CONFIG.pool.min,\r\n        max: DB_CONFIG.pool.max,\r\n        acquire: 30000,\r\n        idle: DB_CONFIG.pool.idleTimeoutMillis\r\n    }\r\n});\r\n\r\n\r\nconst CustomerModel = Customers.getModel(sequelize, Sequelize);\r\n\r\nclass DbManager {\r\n    // static async executeQuery(statement) {\r\n    //     if (!statement) {\r\n    //         throw new Error(INVALID_STATEMENT)\r\n    //     }\r\n\r\n    //     await sql.connect(DB_CONFIG);\r\n    //     const result = await sql.query(statement);\r\n\r\n    //     return result;\r\n    // }\r\n\r\n    static async executeQuery() {\r\n        let results = await CustomerModel.findAll();\r\n\r\n        // let filteredCustomer = await CustomerModel.findOne({customerId: 1});\r\n\r\n        return results;\r\n    }\r\n\r\n    // static async executePrepareQuery(statement, parameterDefs, parameterValues) {\r\n    //     if (!statement) {\r\n    //         throw new Error(INVALID_STATEMENT)\r\n    //     }\r\n\r\n    //     let result;\r\n    //     let preparedStatement;\r\n\r\n    //     try {\r\n    //         const pool = await sql.connect(DB_CONFIG);\r\n    //         preparedStatement = new sql.PreparedStatement(pool);\r\n\r\n    //         for (let definition of parameterDefs) {\r\n    //             preparedStatement.input(definition.name, definition.type);\r\n    //         }\r\n\r\n    //         await preparedStatement.prepare(statement);\r\n\r\n    //         result = await preparedStatement.execute(parameterValues);\r\n    //     } catch (error) {\r\n    //         console.error(error);\r\n\r\n    //         throw error;\r\n    //     } finally {\r\n    //         await preparedStatement.unprepare();\r\n    //         await sql.close();\r\n    //     }\r\n\r\n    //     return result;\r\n    // }\r\n}\r\n\r\nexport {\r\n    DbManager\r\n};"],"file":"db-manager.js"}