{"version":3,"sources":["../../src/hosting/customer-service-host.js"],"names":["INVALID_PORT_NUMBER","CUSTOMER_SERVICE_URL","CustomerServiceHost","constructor","portNumber","Error","app","httpServer","http","createServer","customerRouter","CustomerRouter","initializeApplication","use","applyCors","bodyParser","json","Router","request","response","next","header","start","promise","Promise","resolve","reject","listen","stop","close"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,mBAAmB,GAAG,gCAA5B;AACA,MAAMC,oBAAoB,GAAG,gBAA7B;;AAEA,MAAMC,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,QAAI,CAACA,UAAL,EAAiB;AACb,YAAM,IAAIC,KAAJ,CAAUL,mBAAV,CAAN;AACH;;AAED,SAAKI,UAAL,GAAkBA,UAAlB;AACA,SAAKE,GAAL,GAAW,wBAAX;AACA,SAAKC,UAAL,GAAkBC,eAAKC,YAAL,CAAkB,KAAKH,GAAvB,CAAlB;AACA,SAAKI,cAAL,GAAsB,IAAIC,8BAAJ,EAAtB;AAEA,SAAKC,qBAAL;AACH;;AAEDA,EAAAA,qBAAqB,GAAG;AACpB,SAAKN,GAAL,CAASO,GAAT,CAAa,KAAKC,SAAlB;AACA,SAAKR,GAAL,CAASO,GAAT,CAAaE,qBAAWC,IAAX,EAAb;AACA,SAAKV,GAAL,CAASO,GAAT,CAAaZ,oBAAb,EAAmC,KAAKS,cAAL,CAAoBO,MAAvD;AACH;;AAEDH,EAAAA,SAAS,CAACI,OAAD,EAAUC,QAAV,EAAoBC,IAApB,EAA0B;AAC/BD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,kCAAhB,EAAoD,MAApD;AACAF,IAAAA,QAAQ,CAACE,MAAT,CAAgB,6BAAhB,EAA+C,GAA/C;AACAF,IAAAA,QAAQ,CAACE,MAAT,CAAgB,8BAAhB,EAAgD,GAAhD;AACAF,IAAAA,QAAQ,CAACE,MAAT,CAAgB,8BAAhB,EACI,+DADJ;AAGAD,IAAAA,IAAI;AACP;;AAEDE,EAAAA,KAAK,GAAG;AACJ,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C,WAAKnB,UAAL,CAAgBoB,MAAhB,CAAuB,KAAKvB,UAA5B,EAAwC,MAAMqB,OAAO,EAArD;AACH,KAFe,CAAhB;AAIA,WAAOF,OAAP;AACH;;AAEDK,EAAAA,IAAI,GAAG;AACH,UAAML,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C,WAAKnB,UAAL,CAAgBsB,KAAhB,CAAsB,MAAMJ,OAAO,EAAnC;AACH,KAFe,CAAhB;AAIA,WAAOF,OAAP;AACH;;AA5CqB;;QAgDtBrB,mB,GAAAA,mB","sourcesContent":["import express from 'express';\r\nimport http from 'http';\r\nimport bodyParser from 'body-parser';\r\nimport { CustomerRouter } from '../routing/customer-router';\r\n\r\nconst INVALID_PORT_NUMBER = 'Invalid Port Number Specified!';\r\nconst CUSTOMER_SERVICE_URL = '/api/customers';\r\n\r\nclass CustomerServiceHost {\r\n    constructor(portNumber) {\r\n        if (!portNumber) {\r\n            throw new Error(INVALID_PORT_NUMBER);\r\n        }\r\n\r\n        this.portNumber = portNumber;\r\n        this.app = express();\r\n        this.httpServer = http.createServer(this.app);\r\n        this.customerRouter = new CustomerRouter();\r\n\r\n        this.initializeApplication();\r\n    }\r\n\r\n    initializeApplication() {\r\n        this.app.use(this.applyCors);\r\n        this.app.use(bodyParser.json());\r\n        this.app.use(CUSTOMER_SERVICE_URL, this.customerRouter.Router);\r\n    }\r\n\r\n    applyCors(request, response, next) {\r\n        response.header('Access-Control-Allow-Credentials', 'true');\r\n        response.header('Access-Control-Allow-Origin', '*');\r\n        response.header('Access-Control-Allow-Methods', '*');\r\n        response.header('Access-Control-Allow-Headers',\r\n            'Origin, X-Requested-With, Content-Type, Accept, Authorization');\r\n\r\n        next();\r\n    }\r\n\r\n    start() {\r\n        const promise = new Promise((resolve, reject) => {\r\n            this.httpServer.listen(this.portNumber, () => resolve());\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    stop() {\r\n        const promise = new Promise((resolve, reject) => {\r\n            this.httpServer.close(() => resolve());\r\n        });\r\n\r\n        return promise;\r\n    }\r\n}\r\n\r\nexport {\r\n    CustomerServiceHost\r\n};\r\n"],"file":"customer-service-host.js"}